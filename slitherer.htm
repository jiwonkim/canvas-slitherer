<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" type="text/css" href="style.css">
<script type="text/javascript" src="tools/jquery-1.8.3.min.js"></script>
<script type="text/javascript" src="slitherer.js"></script>
</head>
<body>
<script type="text/javascript">
var game;
function displayStatus(statusName, message) {
    ['idea', 'ok', 'warning', 'error'].forEach(function(s) {
        if(s==statusName) {
            $('.status-'+s).css('display', 'block');
        } else {
            $('.status-'+s).css('display', 'none');
        }
    });
    $('p.status-'+statusName).html(message);
}
$(function() {
    document.onselectstart = function () { return false; }
    var field = slitherer()
        .init(
            document.getElementById('board-layer'),
            document.getElementById('snakes-layer'),
            document.getElementById('ladders-layer'),
            document.getElementById('cursor-layer')
        );

    var mousedown = false;
    var modeOffset = 5;
    $('canvas').mousedown(function(evt) {
        mousedown = true;
        try {
            if(field.mode()=='snakes') {
                field.addSnake(evt.offsetX + modeOffset, evt.offsetY + modeOffset); 
            } else if(field.mode()=='ladders') {
                field.addLadder(evt.offsetX + modeOffset, evt.offsetY + modeOffset); 
            }
        } catch(err) {
            displayStatus(err.type, err.message); 
        }

    }).mouseup(function(evt) {
        mousedown = false;
        try {
            if(field.mode()=='snakes') {
                field.endSnake(evt.offsetX + modeOffset, evt.offsetY + modeOffset); 
                displayStatus('idea', 'Add a snake by dragging the mouse from road to road.');
            } else if(field.mode()=='ladders') {
                field.endLadder(evt.offsetX + modeOffset, evt.offsetY + modeOffset); 
                displayStatus('idea', 'Add a ladder by dragging the mouse from road to road.');
            } else if(field.mode()=='roads') {
                if(field.endRoad()) {
                    displayStatus('ok', 'Congratulations! You have successfully built a road.');
                }
            }
        } catch(err) {
            displayStatus(err.type, err.message);  
        }
    }).mouseout(function(evt) {
        // remove mouse cursor image
        field.clearLayer('cursor')
    }).mousemove(function(evt) {
        // display mode as mouse cursor
        field.displayCursor(evt.offsetX, evt.offsetY);
        
        if(!mousedown) return;
        try {
            switch(field.mode()) {
                case 'roads':
                    field.addRoadAt(evt.offsetX + modeOffset, evt.offsetY + modeOffset);
                    displayStatus('idea', 'Build a road by dragging the mouse on the board.');
                    break;
                case 'snakes':
                    field.updateSnake(
                        evt.offsetX + modeOffset,
                        evt.offsetY + modeOffset,
                        true
                    );
                    displayStatus('idea', 'Add a snake by dragging the mouse from road to road.');
                    break;
                case 'ladders':
                    field.updateLadder(
                        evt.offsetX + modeOffset,
                        evt.offsetY + modeOffset,
                        true
                    );
                    displayStatus('idea', 'Add a ladder by dragging the mouse from road to road.');
                    break;
                default:
                    break;
            }
        } catch (err) {
            mousedown=false;
            displayStatus(err.type, err.message);
        }
    });

    $('#mode-selector button').click(function() {
        $('#mode-selector .selected').removeClass('selected');
        $(this).addClass('selected');
        var mode = $(this).attr('id');
        field.mode(mode);
        switch(mode) {
            case 'roads':
                displayStatus('idea', 'Build a road by dragging the mouse on the board.');
                break;
            case 'snakes':
                displayStatus('idea', 'Add a snake by dragging the mouse from road to road.');
                break;
            case 'ladders':
                displayStatus('idea', 'Add a ladder by dragging the mouse from road to road.');
                break;
            default:
                break;
        }
    }); 
    $('#tool-selector button').click(function() {
        var id = $(this).attr('id');
        if(id!='start-over') {
            $('#tool-selector .selected').removeClass('selected');
            $(this).addClass('selected');
            field.tool(id);
        } else {
            field.clearLayer(field.mode());
        }
    }); 

    //TODO: clean this shit
    var flow = ['num-players', 'player-info', 'done'];
    var currentFlow = 0;
    var numPlayers;    
    var playerNames = [];
    var playerAvatars = [];
    var currPlayer = 0;
    $('#action-selector button').click(function() {
        var prev = $('#action-selector .selected').attr('id');
        var curr = $(this).attr('id');
        field.action(curr);

        // toggle views
        $('.'+prev).hide();
        $('.'+curr).show();

        // update selected
        $('#action-selector .selected').removeClass('selected');
        $(this).addClass('selected');

        if(curr=='play') {
            for(var i=0; i<flow.length; i++) {
                var elem = $('#'+flow[i]);
                if(i==currentFlow) elem.show();
                else elem.hide();
            }
            
            popup();
        } else {
            $('#dialog-overlay, #dialog').hide();
            $('#dice-roll-result').html('');
        }
    });

    $('.cancel').click(function() {
        field.action('build');
        $('.play').hide();
        $('.build').show();
        
        // update selected
        $('#action-selector .selected').removeClass('selected');
        $('#action-selector button#build').addClass('selected');
        
        // hide dialog window
        $('#dialog-overlay, #dialog').hide();

        // reset stuff
        currentFlow = 0;
        currPlayer = 0;
    });


    //TODO: Arg so messy need to clean this shit up
    $('.next').click(function() {
        switch(currentFlow) {
            case 0:
                numPlayers = $('#num-players input').val();
                $('#num-players').hide();
                currentFlow++;
                $('#'+flow[currentFlow]).show();
                $('#player-info .dialog-message').html('Player '+(currPlayer+1));
                $('#player-info input').focus();
                break;
            case 1:
                currPlayer++;
                if(currPlayer==numPlayers) {
                    currentFlow++;
                    $('#player-info').hide();
                    $('#'+flow[currentFlow]).show();
                } else {
                    $('#player-info .dialog-message').html('Player '+(currPlayer+1));
                }
                playerNames[currPlayer-1] = $('#player-info input').val();
                
                var avatar = new Image();
                avatar.src = 'images/'+avatars[currAvatar]+'.png';
                playerAvatars[currPlayer-1] = avatar;
                $('#player-info input').val('');
                $('#player-info input').focus();
                break;
            case 2:
                game = slitherer.game()
                    .width(field.width()).height(field.height())
                    .tilewidth(field.tilewidth()).tileheight(field.tileheight())
                    .init(field.getRoads(), field.getSnakes(), field.getLadders(), playerNames, playerAvatars, $('#gamepiece-layer')[0].getContext('2d'));
                $('#dialog, #dialog-overlay').hide();
                console.log("Starting game! Player 1's turn");

                // reset stuff
                currentFlow = currPlayer = 0;
                break;
            default:
                break;
        }
        
    });

    var currAvatar = 0;
    var avatars = [
        'gamepiece-explorer-red',
        'gamepiece-explorer-blue',
        'gamepiece-explorer-green',
        'gamepiece-explorer-yellow',
        'gamepiece-explorer-purple',
    ];
    $('.avatar').click(function() {
        currAvatar = (currAvatar + 1)%5;
        this.src = 'images/' + avatars[currAvatar] + '.png';
    });

    $('#dice').click(function() {
        // play sound effect
        $('#sound')[0].currentTime = 0;
        $('#sound')[0].play();

        // clear results pane
        $('#dice-roll-result').html('');

        result = 0;
        rollDice(function() {
            console.log(playerNames[game.turn()]+" has rolled "+result);

            // move player
            game.play(result);

            game.passTurn();
            console.log(playerNames[game.turn()]+"'s turn");
        });

    });
    
    addDice();
});

function rollDice(callback) {
    if(game.playing()) {
        console.log("The last player hasn't finished his turn yet.");
        return;
    }
    var rolled = false;
    rollDie('#dice .face1', 1000, function() {
        if(rolled) callback();
        else rolled = true;
    });
    rollDie('#dice .face2', 1400, function() {
        if(rolled) callback();
        else rolled = true;
    });
}

function addDice() {
    var d1 = Math.floor(Math.random()*6 + 1);
    var d2 = Math.floor(Math.random()*6 + 1);
    $('#dice .face1').attr('src', 'images/dice'+d1+'.png')
    $('#dice .face2').attr('src', 'images/dice'+d2+'.png')
}

var result = 0;
function rollDie(selector, duration, callback) {
    var face;
    var roll= setInterval(function() {
        face = Math.floor(Math.random()*6 + 1);
        $(selector).attr('src', 'images/dice'+face+'.png');
    }, 100);

    $(selector).css('opacity', 0.4);
    setTimeout(function() {
        clearInterval(roll); 
        $(selector).css('opacity', 1);
        result += face;
        $('#dice-roll-result').html(result);
        callback();
    }, duration);

}

function popup(callback) {
    // get the screen height and width  
    var maskHeight = $(document).height();  
    var maskWidth = $(window).width();
     
    // calculate the values for center alignment
    var dialogTop =  (maskHeight/3) - ($('#dialog').height()/2);  
    var dialogLeft = (maskWidth/2) - ($('#dialog').width()/2); 
     
    // assign values to the overlay and dialog box
    $('#dialog-overlay').css({height:maskHeight, width:maskWidth}).show();
    $('#dialog').css({top:dialogTop, left:dialogLeft}).show();
     
}
</script>
<div id="left">
    <img id="title" class="center" src="images/title-small.png" />
    <div class="center" id="action-selector">
        <button id="build" class="selected">Build</button>
        <button id="play">Play</button>
    </div>
    <div class="build intro">
        <p>
        Happy New Year!
        </p>
        <p>
        2013 is the year of the snake. Celebrate the new year with a round or two of good ol' <strong>Snakes and Ladders</strong>.
        </p>
        <p>
        Pave the roads, unleash some snakes, sprinkle some ladders here and there, and then press <strong>Play</strong> to enjoy the game you created.
        </p>
    </div>
    <div class="play intro">
        <p>Click to roll the dice!
        </p>
    </div>
    <div id="dice" class="play center">
        <img class="face face1" />
        <img class="face face2" />
        <audio id="sound" preload="auto">
          <source src="sounds/dice.mp3" type="audio/mp3">
        </audio>
    </div>
    <div id="dice-roll-result" class="play center">
    </div>

</div>
<div id="right">
    <div id="embossed">
    <div class="status play">
        Play!
    </div>
    <div class="status build">
        <img class="status-ok" src="images/checkicon.png" />
        <img class="status-warning" src="images/bangicon.png" />
        <img class="status-error" src="images/erroricon.png" />
        <img class="status-idea" src="images/ideaicon.png" />
        <p class="status-ok"></p>
        <p class="status-warning"></p>
        <p class="status-error"></p>
        <p class="status-idea">Build a road by dragging the mouse on the board.</p>
    </div>
    <div id="mode-selector" class="build">
        <button class="selected" id="roads"></button>
        <button id="snakes"></button>
        <button id="ladders"></button>
    </div>
    
    <div id="tool-selector" class="build">
        <!--button id="add" class="selected"></button-->
        <button id="start-over"></button>
    </div>
    <div id="viewport" class="center">
        <canvas id="board-layer" width="900" height="540"></canvas>
        <canvas id="snakes-layer" width="900" height="540"></canvas>
        <canvas id="ladders-layer" width="900" height="540"></canvas>
        <canvas id="gamepiece-layer" width="900" height="540"></canvas>
        <canvas id="cursor-layer" width="900" height="540"></canvas>
    </div>
    </div>
</div>

<div id="dialog-overlay">
<!--img id="title" class="center" src="images/title-small.png" /-->
</div>
<div id="dialog">
    <div id="num-players" class="dialog-box">
        <div class="dialog-message">How many players?</div>
        <input type="number" min=1 max=10 value=2></input>
        <div class="buttons">
            <button class="next">Next</button>
            <button class="cancel">Cancel</button>
        </div>
    </div>
    <div id="player-info" class="dialog-box">
        <div class="dialog-message"></div>
        <table>
            <tr>
                <td class="label">
                    <label>Name</label>
                </td>
                <td>
                    <input type="text" id="name"></input>
                </td>
            </tr>
            <tr>
                <td class="label">
                <label>Gamepiece</label>
                </td>
                <td>
                <div id="avatar-selector">
                <img class="avatar" src="images/gamepiece-explorer-red.png"/>
                </div>
                </td>
             </tr>
        </table> 
        <div class="buttons">
            <button class="next">Next</button>
            <button class="cancel">Cancel</button>
        </div>
    </div>
    <div id="done" class="dialog-box">
        <div class="dialog-message">Done!</div>
        <div class="buttons">
            <button class="next">Play</button>
            <button class="cancel">Cancel</button>
        </div>
    </div>
</div>

</body>
</html>
